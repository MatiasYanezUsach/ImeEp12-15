mujeres_solteras_rm <- muestra_hogares %>% filter(sexo == "Mujer")
# Se extrae el número de hombres y mujeres solteras de acuerdo a la muestra obtenida
n_hombres_solteros <- nrow(hombres_solteros_rm)
n_mujeres_solteras <- nrow(mujeres_solteras_rm)
# Crear un dataframe con los datos
datos_solteros <- data.frame(Grupo = c("Hombres",
"Mujeres"),
Cantidad = c(n_hombres_solteros,
n_mujeres_solteras))
# Se crea el grafico correspondiente
g3 <- ggplot(datos_solteros, aes(x = Grupo, y = Cantidad, fill = Grupo)) +
geom_bar(stat = "identity") +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Hombres solteros v/S Mujeres solteras") +
theme_minimal()
print(g3)
# En este punto, se identifica que debemos para comparar una variable continua (media)
# en dos muestras independientes. Por lo que, en este caso, una buena alternativa robusta
# es la prueba de Yuen con bootstrapping usando como estimador la media.
B <- 5000
# Se establece el alfa:
alfa <- 0.05
# Calcular la cantidad de hombres y mujeres por región
hombres_por_region <- muestra_hogares %>% filter(sexo == "Hombre") %>% count(region)
mujeres_por_region <- muestra_hogares %>% filter(sexo == "Mujer") %>% count(region)
# Unir los datos con la tabla existente
muestra_hogares <- merge(muestra_hogares, hombres_por_region, by = "region", all.x = TRUE)
muestra_hogares <- merge(muestra_hogares, mujeres_por_region, by = "region", all.x = TRUE)
# Renombrar las columnas
colnames(muestra_hogares)[5] <- "Hombres_por_region"
colnames(muestra_hogares)[6] <- "Mujeres_por_region"
View(muestra_hogares)
# Renombrar las columnas
colnames(muestra_hogares)[5] <- "Hombres_por_region"
colnames(muestra_hogares)[5] <- "Mujeres_por_region"
prueba_yuen <- pb2gen(Hombres_por_region + Mujeres_por_region ~ sexo, data = muestra_hogares, est = "mean", nboot = B)
# Renombrar las columnas
colnames(muestra_hogares)[5] <- "Hombres_por_region"
colnames(muestra_hogares)[6] <- "Mujeres_por_region"
# Renombrar las columnas
colnames(muestra_hogares)[4] <- "Hombres_por_region"
colnames(muestra_hogares)[5] <- "Mujeres_por_region"
prueba_yuen <- pb2gen(hombres_por_region + mujeres_por_region ~ sexo, data = muestra_hogares, est = "mean", nboot = B)
# Crear nueva columna con la suma de hombres y mujeres por región
muestra_hogares$Total_por_region <- muestra_hogares$Hombres_por_region + muestra_hogares$Mujeres_por_region
# Reemplazar NA por 0
muestra_hogares$Hombres_por_region <- replace(muestra_hogares$Hombres_por_region, is.na(muestra_hogares$Hombres_por_region), 0)
muestra_hogares$Mujeres_por_region <- replace(muestra_hogares$Mujeres_por_region, is.na(muestra_hogares$Mujeres_por_region), 0)
# Calcular la cantidad de hombres y mujeres por región
hombres_por_region <- muestra_hogares %>% filter(sexo == "Hombre") %>% count(region)
mujeres_por_region <- muestra_hogares %>% filter(sexo == "Mujer") %>% count(region)
# Unir los datos con la tabla existente
muestra_hogares <- merge(muestra_hogares, hombres_por_region, by = "region", all.x = TRUE)
muestra_hogares <- merge(muestra_hogares, mujeres_por_region, by = "region", all.x = TRUE)
# Renombrar las columnas
colnames(muestra_hogares)[4] <- "Hombres_por_region"
colnames(muestra_hogares)[5] <- "Mujeres_por_region"
# Reemplazar NA por 0
muestra_hogares$Hombres_por_region <- replace(muestra_hogares$Hombres_por_region, is.na(muestra_hogares$Hombres_por_region), 0)
muestra_hogares$Mujeres_por_region <- replace(muestra_hogares$Mujeres_por_region, is.na(muestra_hogares$Mujeres_por_region), 0)
# Crear nueva columna con la suma de hombres y mujeres por región
muestra_hogares$Total_por_region <- muestra_hogares$Hombres_por_region + muestra_hogares$Mujeres_por_region
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil Soltero(a).
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Se obtiene los datos referentes a hombres solteros de acuerdo a la muestra obtenida anteriormente
hombres_solteros_rm <- muestra_hogares %>% filter(sexo == "Hombre")
# Se obtiene los datos referentes a mujeres solteras de acuerdo a la muestra obtenida anteriormente
mujeres_solteras_rm <- muestra_hogares %>% filter(sexo == "Mujer")
# Se extrae el número de hombres y mujeres solteras de acuerdo a la muestra obtenida
n_hombres_solteros <- nrow(hombres_solteros_rm)
n_mujeres_solteras <- nrow(mujeres_solteras_rm)
# Crear un dataframe con los datos
datos_solteros <- data.frame(Grupo = c("Hombres",
"Mujeres"),
Cantidad = c(n_hombres_solteros,
n_mujeres_solteras))
# Se crea el grafico correspondiente
g3 <- ggplot(datos_solteros, aes(x = Grupo, y = Cantidad, fill = Grupo)) +
geom_bar(stat = "identity") +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Hombres solteros v/S Mujeres solteras") +
theme_minimal()
print(g3)
# En este punto, se identifica que debemos para comparar una variable continua (media)
# en dos muestras independientes. Por lo que, en este caso, una buena alternativa robusta
# es la prueba de Yuen con bootstrapping usando como estimador la media.
B <- 5000
# Se establece el alfa:
alfa <- 0.05
# Calcular la cantidad de hombres y mujeres por región
hombres_por_region <- muestra_hogares %>% filter(sexo == "Hombre") %>% count(region)
mujeres_por_region <- muestra_hogares %>% filter(sexo == "Mujer") %>% count(region)
# Unir los datos con la tabla existente
muestra_hogares <- merge(muestra_hogares, hombres_por_region, by = "region", all.x = TRUE)
muestra_hogares <- merge(muestra_hogares, mujeres_por_region, by = "region", all.x = TRUE)
# Renombrar las columnas
colnames(muestra_hogares)[4] <- "Hombres_por_region"
colnames(muestra_hogares)[5] <- "Mujeres_por_region"
View(datos)
View(muestra_hogares)
# Reemplazar NA por 0
muestra_hogares$Hombres_por_region <- replace(muestra_hogares$Hombres_por_region, is.na(muestra_hogares$Hombres_por_region), 0)
muestra_hogares$Mujeres_por_region <- replace(muestra_hogares$Mujeres_por_region, is.na(muestra_hogares$Mujeres_por_region), 0)
# Crear nueva columna con la suma de hombres y mujeres por región
muestra_hogares$Total_por_region <- muestra_hogares$Hombres_por_region + muestra_hogares$Mujeres_por_region
# Realizar la prueba de Yuen
prueba_yuen <- pb2gen(Total_por_region ~ sexo, data = muestra_hogares, est = "mean", nboot = B)
print(prueba_yuen)
# Eliminar filas duplicadas
muestra_hogares <- distinct(muestra_hogares, .keep_all = TRUE)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(region, Hombres_por_region, Mujeres_por_region, Total_por_region)
# Eliminar filas duplicadas
muestra_hogares <- distinct(muestra_hogares, .keep_all = TRUE)
# Realizar la prueba de Yuen
prueba_yuen <- pb2gen(Total_por_region ~ region, data = muestra_hogares, est = "mean", nboot = B)
print(prueba_yuen)
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(WRS2)){
install.packages("tidyr", dependencies = TRUE)
require(WRS2)
}
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil Soltero(a).
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Se obtiene los datos referentes a hombres solteros de acuerdo a la muestra obtenida anteriormente
hombres_solteros_rm <- muestra_hogares %>% filter(sexo == "Hombre")
View(hombres_solteros_rm)
# Se obtiene los datos referentes a hombres solteros de acuerdo a la muestra obtenida anteriormente
hombres_solteros<- muestra_hogares %>% filter(sexo == "Hombre")
# Obtenemos la cantidad de hombres por region
hombres_por_region <- hombres_solteros %>% group_by(region) %>% count()
View(hombres_por_region)
# Se obtiene los datos referentes a mujeres solteras de acuerdo a la muestra obtenida anteriormente
mujeres_solteras <- muestra_hogares %>% filter(sexo == "Mujer")
# Obtenemos la cantidad de hombres por region
mujeres_por_region <- mujeres_solteras %>% group_by(region) %>% count()
View(mujeres_por_region)
# Completar las regiones sin hombres y sin mujeres solter@s con un valor de cero
hombres_por_region <- hombres_por_region %>% complete(region, fill = list(n = 0))
# Completar las regiones sin hombres y sin mujeres solter@s con un valor de cero
hombres_por_region <- hombres_por_region %>% complete(region, fill = list(n = 0))
# Completar las regiones sin hombres solteros con un valor de cero (0)
hombres_por_region <- hombres_por_region %>% complete(region, fill = list(n = 0))
# Completar las regiones sin hombres solteros con un valor de cero (0)
hombres_por_region <- hombres_por_region %>% complete(hombres_por_region$region, fill = list(n = 0))
mujeres_por_region <- mujeres_por_region %>% complete(mujeres_por_region$region, fill = list(n = 0))
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil Soltero(a).
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Se obtiene los datos referentes a hombres solteros de acuerdo a la muestra obtenida anteriormente
hombres_solteros<- muestra_hogares %>% filter(sexo == "Hombre")
# Se obtiene los datos referentes a mujeres solteras de acuerdo a la muestra obtenida anteriormente
mujeres_solteras <- muestra_hogares %>% filter(sexo == "Mujer")
# Obtenemos la cantidad de hombres por region
mujeres_por_region <- mujeres_solteras %>% group_by(region) %>% count()
# Completar las regiones sin hombres y sin mujeres solter@s con un valor de cero
hombres_por_region <- hombres_por_region %>% complete(region, fill = list(n = 0))
mujeres_por_region <- mujeres_por_region %>% complete(region, fill = list(n = 0))
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil Soltero(a).
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Se obtiene los datos referentes a hombres solteros de acuerdo a la muestra obtenida anteriormente
hombres_solteros<- muestra_hogares %>% filter(sexo == "Hombre")
# Se obtiene los datos referentes a mujeres solteras de acuerdo a la muestra obtenida anteriormente
mujeres_solteras <- muestra_hogares %>% filter(sexo == "Mujer")
# Obtenemos la cantidad de hombres por region
mujeres_por_region <- mujeres_solteras %>% group_by(region) %>% count()
# Se extrae el número de hombres y mujeres solteras de acuerdo a la muestra obtenida
n_hombres_solteros <- nrow(hombres_solteros_rm)
n_mujeres_solteras <- nrow(mujeres_solteras_rm)
datos2 <- data.frame(hombres_por_region,mujeres_por_region)
View(datos2)
# Realizar la unión por la columna "region"
tabla_final <- merge(hombres_por_region, mujeres_por_region, by = "region", all = TRUE)
View(tabla_final)
View(mujeres_por_region)
# Renombrar las columnas
colnames(tabla_final)[1] <- "Hombresn"
colnames(muestra_hogares)[2] <- "Mujeres"
# Renombrar las columnas
colnames(tabla_final)[1] <- "Hombres"
View(tabla_final)
colnames(tabla_final)[2] <- "Mujeres"
# Renombrar las columnas
colnames(tabla_final)[2] <- "Hombres"
colnames(tabla_final)[3] <- "Mujeres"
# Realizar la unión por la columna "region"
sexo <- factor(c(rep("A", length(hombres_por_region)), rep("B", length(mujeres_por_region))))
# Realizar la unión por la columna "region"
sexo <- factor(c(rep("Hombres", length(hombres_por_region)), rep("Mujeres", length(mujeres_por_region))))
cantidad <- c(hombres_por_region, mujeres_por_region)
datos2 <- data.frame(sexo, cantidad)
# Realizar la unión por la columna "region"
sexo <- factor(c(rep("Hombres", length(hombres_por_region)), rep("Mujeres", length(mujeres_por_region) + 1)))
cantidad <- c(hombres_por_region, mujeres_por_region)
datos2 <- data.frame(sexo, cantidad)
View(tabla_final)
# Realizar la unión por la columna "region"
tabla_temporal <- merge(hombres_por_region, mujeres_por_region, by = "region", all = TRUE)
# Renombrar las columnas
colnames(tabla_final)[2] <- "Hombres"
colnames(tabla_final)[3] <- "Mujeres"
# Renombrar las columnas
colnames(tabla_temporal)[2] <- "Hombres"
colnames(tabla_temporal)[3] <- "Mujeres"
# Reemplazar NA por 0
tabla_temporal$Hombres <- replace(tabla_temporal$Hombres, is.na(tabla_temporal$Hombres), 0)
tabla_temporal$Mujeres <- replace(tabla_temporal$Mujeres, is.na(tabla_temporal$Mujeres), 0)
# Reemplazar NA por 0
tabla_temporal$Hombres <- replace(tabla_temporal$Hombres, is.na(tabla_temporal$Hombres), 0)
tabla_temporal$Mujeres <- replace(tabla_temporal$Mujeres, is.na(tabla_temporal$Mujeres), 0)
View(tabla_temporal)
# creamos la tabla final
sexo <- factor(c(rep("Hombres", length(tabla_temporal$Hombres)), rep("Mujeres", length(tabla_temporal$Mujeres))))
cantidad <- c(tabla_temporal$Hombres, tabla_temporal$Mujeres)
datos2 <- data.frame(sexo, cantidad)
View(datos2)
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(WRS2)){
install.packages("tidyr", dependencies = TRUE)
require(WRS2)
}
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil Soltero(a).
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Se obtiene los datos referentes a hombres solteros de acuerdo a la muestra obtenida anteriormente
hombres_solteros<- muestra_hogares %>% filter(sexo == "Hombre")
# Se obtiene los datos referentes a mujeres solteras de acuerdo a la muestra obtenida anteriormente
mujeres_solteras <- muestra_hogares %>% filter(sexo == "Mujer")
# Obtenemos la cantidad de hombres por region
mujeres_por_region <- mujeres_solteras %>% group_by(region) %>% count()
# Realizar la unión por la columna "region"
tabla_temporal <- merge(hombres_por_region, mujeres_por_region, by = "region", all = TRUE)
# Obtenemos la cantidad de hombres por region y mujeres por region
hombres_por_region <- hombres_solteros %>% group_by(region) %>% count()
mujeres_por_region <- mujeres_solteras %>% group_by(region) %>% count()
# Realizar la unión por la columna "region"
tabla_temporal <- merge(hombres_por_region, mujeres_por_region, by = "region", all = TRUE)
# Renombrar las columnas
colnames(tabla_temporal)[2] <- "Hombres"
colnames(tabla_temporal)[3] <- "Mujeres"
# Reemplazar NA por 0
tabla_temporal$Hombres <- replace(tabla_temporal$Hombres, is.na(tabla_temporal$Hombres), 0)
tabla_temporal$Mujeres <- replace(tabla_temporal$Mujeres, is.na(tabla_temporal$Mujeres), 0)
# creamos la tabla final
sexo <- factor(c(rep("Hombres", length(tabla_temporal$Hombres)), rep("Mujeres", length(tabla_temporal$Mujeres))))
cantidad <- c(tabla_temporal$Hombres, tabla_temporal$Mujeres)
datos2 <- data.frame(sexo, cantidad)
View(datos2)
# Construimos el histograma de los datos.
g3 <- gghistogram(datos2, x = "cantidad Solteros", xlab = "sexo", color = "sexo",
fill = "sexo", bins = 5)
g3 <- g3 + facet_grid(~ sexo)
print(g3)
# Construir el histograma de los datos
g3 <- ggplot(datos2, aes(x = cantidad, fill = sexo)) +
geom_histogram(binwidth = 5, position = "identity") +
facet_grid(~ sexo) +
labs(x = "Cantidad de Solteros(as)", y = "Frecuencia", fill = "Sexo")
# Mostrar el gráfico
print(g3)
# Veamos ahora el histograma de los datos.
g3 <- gghistogram(datos2, x = "cantidad", xlab = "sexo", color = "sexo",
fill = "sexo", bins = 30)
g3 <- g3 + facet_grid(~ sexo)
print(g3)
# En este punto, se identifica que debemos para comparar una variable continua (media)
# en dos muestras independientes. Por lo que, en este caso, una buena alternativa robusta
# es la prueba de Yuen con bootstrapping usando como estimador la media.
B <- 5000
# Se establece el alfa:
alfa <- 0.05
prueba_yuen_boots <- pb2gen(cantidad ~ sexo, data = datos2, est = "mean",nboot = B)
print(prueba.2)
print(prueba_yuen_boots)
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(WRS2)){
install.packages("tidyr", dependencies = TRUE)
require(WRS2)
}
winter_nelly <- c(150.6948, 144.935, 321.2211, 153.4385, 122.8188, 171.2131, 157.9422, 219.7431, 204.1157)
golden_bosc <- c(130.2934, 192.9736, 227.2896, 160.5874, 132.915, 118.7482, 149.1814, 236.0405, 191.3631, 133.928, 367.991, 144.3353)
alfa <- 0.05
print(shapiro.test(winter_nelly))
print(shapiro.test(golden_bosc))
# Se realizan los gráficos de dispersión e histograma correspondientes
g1 <- gghistogram(winter_nelly, color = "blue",
fill = "blue", bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
g2 <- gghistogram(golden_bosc, color = "red",
fill = "red", bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
print(g1)
print(g2)
# Se realizan los gráficos Q-Q para mostrar la distribución.
g1_q_q <- ggqqplot(data = winter_nelly,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra Winter Nelly vs. distribución normal")
print(g1_q_q)
g2_q_q <- ggqqplot(data = golden_bosc,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra Golden Bosc vs. distribución normal")
print(g2_q_q)
# Se realiza una transformación logarítmica debido a la asimetría de los datos
log_winter_nelly <- log(winter_nelly)
log_golden_bosc <- log(golden_bosc)
# Se utiliza Shapiro para verificar si las transformaciones tienen una distribución normal
print(shapiro.test(log_winter_nelly))
print(shapiro.test(log_golden_bosc))
# Se realizan los gráficos de dispersión e histograma correspondientes
log_g1 <- gghistogram(log_winter_nelly,
color = "blue",
fill = "blue",
bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
log_g2 <- gghistogram(log_golden_bosc,
color = "red",
fill = "red",
bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
print(log_g1)
print(log_g2)
# Comprobación de similitud a distribución normal mediante gráfico Q-Q
log_g1_q_q <- ggqqplot(data = log_winter_nelly,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra transformada Winter Nelly vs. distribución normal")
print(log_g1_q_q)
log_g2_q_q <- ggqqplot(data = log_golden_bosc,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra transformada Golden Bosc vs. distribución normal")
print(log_g2_q_q)
prueba <- t.test(x = log_winter_nelly,
y = log_golden_bosc,
paired = FALSE,
alternative = "two.sided",
mu = 0,
conf.level = 1 - alfa)
#se imprime la prueba realizada
print(prueba)
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil Soltero(a).
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Se obtiene los datos referentes a hombres  y mujeres solteras de acuerdo a la muestra obtenida anteriormente
hombres_solteros<- muestra_hogares %>% filter(sexo == "Hombre")
mujeres_solteras <- muestra_hogares %>% filter(sexo == "Mujer")
# Obtenemos la cantidad de hombres por region y mujeres por region
hombres_por_region <- hombres_solteros %>% group_by(region) %>% count()
mujeres_por_region <- mujeres_solteras %>% group_by(region) %>% count()
# Unimos las muestras anteriores por la columna "region" en una tabla temporal
tabla_temporal <- merge(hombres_por_region, mujeres_por_region, by = "region", all = TRUE)
# Renombramos las columnas
colnames(tabla_temporal)[2] <- "Hombres"
colnames(tabla_temporal)[3] <- "Mujeres"
# Reemplazar NA por 0, lo cual indica que no hay hombres o mujeres en dicha region
tabla_temporal$Hombres <- replace(tabla_temporal$Hombres, is.na(tabla_temporal$Hombres), 0)
tabla_temporal$Mujeres <- replace(tabla_temporal$Mujeres, is.na(tabla_temporal$Mujeres), 0)
# creamos la tabla final
sexo <- factor(c(rep("Hombres", length(tabla_temporal$Hombres)), rep("Mujeres", length(tabla_temporal$Mujeres))))
cantidad <- c(tabla_temporal$Hombres, tabla_temporal$Mujeres)
datos2 <- data.frame(sexo, cantidad)
# Veamos ahora el histograma de los datos.
g3 <- gghistogram(datos2, x = "cantidad", xlab = "sexo", color = "sexo",
fill = "sexo", bins = 30)
g3 <- g3 + facet_grid(~ sexo)
print(g3)
g4 <- ggqqplot(datos2, x = "cantidad", faced.by = "sexo",palette = c("blue", "red"), color = "sexo",
fill = "sexo", bins = 30)
print(g4)
# Veamos ahora el histograma de los datos.
g3 <- gghistogram(datos2, x = "cantidad", xlab = "sexo", ylab = "frecuencia", color = "sexo",
fill = "sexo", bins = 30)
g3 <- g3 + facet_grid(~ sexo)
print(g3)
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación, se fija una semilla propia
set.seed(449)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la pregunta planteada
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil "Soltero(a)"
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Se obtienen los datos referentes a hombres y mujeres solteras de acuerdo a la
# muestra obtenida anteriormente
hombres_solteros <- muestra_hogares %>% filter(sexo == "Hombre")
mujeres_solteras <- muestra_hogares %>% filter(sexo == "Mujer")
# Se obtiene la cantidad de hombres por región y mujeres por región
hombres_por_region <- hombres_solteros %>% group_by(region) %>% count()
mujeres_por_region <- mujeres_solteras %>% group_by(region) %>% count()
# Se unen las muestras anteriores por la columna "region" en una tabla temporal
tabla_temporal <- merge(hombres_por_region, mujeres_por_region, by = "region", all = TRUE)
# Se renombran las columnas
colnames(tabla_temporal)[2] <- "Hombres"
colnames(tabla_temporal)[3] <- "Mujeres"
# Reemplazar NA por 0, lo cual indica que no hay hombres o mujeres en dicha region, a partir
# de la muestra seleccionada
tabla_temporal$Hombres <- replace(tabla_temporal$Hombres, is.na(tabla_temporal$Hombres), 0)
tabla_temporal$Mujeres <- replace(tabla_temporal$Mujeres, is.na(tabla_temporal$Mujeres), 0)
# Se crea la tabla final
sexo <- factor(c(rep("Hombres", length(tabla_temporal$Hombres)), rep("Mujeres", length(tabla_temporal$Mujeres))))
cantidad <- c(tabla_temporal$Hombres, tabla_temporal$Mujeres)
datos2 <- data.frame(sexo, cantidad)
# Se muestra el histograma de los datos
g3 <- gghistogram(datos2, x = "cantidad", xlab = "regiones", ylab = "frecuencia", color = "sexo",
fill = "sexo", bins = 30)
g3 <- g3 + facet_grid(~ sexo)
print(g3)
# Veamos ahora un gráfico tipo Q-Q
g4 <- ggqqplot(datos2, x = "cantidad", faced.by = "sexo", palette = c("blue", "red"), color = "sexo",
fill = "sexo", bins = 30)
print(g4)
# En este punto, se identifica que debemos comparar una variable continua (media) en dos muestras
# independientes. Por lo tanto, en este caso, una buena alternativa robusta es la prueba de Yuen
# con bootstrapping, utilizando la media como estimador.
B <- 5000
# Se establece el nivel de significancia (alfa)
alfa <- 0.05
# Se Realiza la prueba de Yuen con bootstrapping
prueba_yuen_boots <- pb2gen(cantidad ~ sexo, data = datos2, est = "mean", nboot = B)
print(prueba_yuen_boots)
