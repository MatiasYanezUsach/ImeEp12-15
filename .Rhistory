g1_q_q <- ggqqplot(data = winter_nelly, color = "steelblue", xlab = "Teórico", ylab = "Muestra", title = "Gráfico Q-Q muestra vs. distr. normal")
print(g1_q_q)
g2_q_q <- ggqqplot(data = golden_bosc, color = "steelblue", xlab = "Teórico", ylab = "Muestra", title = "Gráfico Q-Q muestra vs. distr. normal")
print(g2_q_q)
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if (!require(tidyverse)) {
install.packages("tidyverse", dependencies = TRUE)
require(tidyverse)
}
winter_nelly <- c(150.6948, 144.935, 321.2211, 153.4385, 122.8188, 171.2131, 157.9422, 219.7431, 204.1157)
golden_bosc <- c(130.2934, 192.9736, 227.2896, 160.5874, 132.915, 118.7482, 149.1814, 236.0405, 191.3631, 133.928, 367.991, 144.3353)
alfa <- 0.05
print(shapiro.test(winter_nelly))
print(shapiro.test(golden_bosc))
# Se realizan los gráfico de dispersión e histograma correspondientes
g1 <- gghistogram(winter_nelly, color = "blue",
fill = "blue", bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
g2 <- gghistogram(golden_bosc, color = "red",
fill = "red", bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
print(g1)
print(g2)
g1_q_q <- ggqqplot(data = winter_nelly,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra Winter_nelly vs. distr. normal")
print(g1_q_q)
g2_q_q <- ggqqplot(data = golden_bosc,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra golden_bosc vs. distr. normal")
print(g2_q_q)
# Se realiza una Transformación logarítmica debido a la asimetría de los datos
log_winter_nelly <- log(winter_nelly)
log_golden_bosc <- log(golden_bosc)
# Se utiliza shapiro para verificar si las transformaciones tienen una distribucion normal
print(shapiro.test(log_winter_nelly))
print(shapiro.test(log_golden_bosc))
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if (!require(tidyverse)) {
install.packages("tidyverse", dependencies = TRUE)
require(tidyverse)
}
winter_nelly <- c(150.6948, 144.935, 321.2211, 153.4385, 122.8188, 171.2131, 157.9422, 219.7431, 204.1157)
golden_bosc <- c(130.2934, 192.9736, 227.2896, 160.5874, 132.915, 118.7482, 149.1814, 236.0405, 191.3631, 133.928, 367.991, 144.3353)
alfa <- 0.05
print(shapiro.test(winter_nelly))
print(shapiro.test(golden_bosc))
# Se realizan los gráficos de dispersión e histograma correspondientes
g1 <- gghistogram(winter_nelly, color = "blue",
fill = "blue", bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
g2 <- gghistogram(golden_bosc, color = "red",
fill = "red", bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
print(g1)
print(g2)
# Se realizan los gráficos Q-Q para mostrar la distribución.
g1_q_q <- ggqqplot(data = winter_nelly,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra Winter Nelly vs. distribución normal")
print(g1_q_q)
g2_q_q <- ggqqplot(data = golden_bosc,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra Golden Bosc vs. distribución normal")
print(g2_q_q)
# Se realiza una transformación logarítmica debido a la asimetría de los datos
log_winter_nelly <- log(winter_nelly)
log_golden_bosc <- log(golden_bosc)
# Se utiliza Shapiro para verificar si las transformaciones tienen una distribución normal
print(shapiro.test(log_winter_nelly))
print(shapiro.test(log_golden_bosc))
# Se realizan los gráficos de dispersión e histograma correspondientes
log_g1 <- gghistogram(log_winter_nelly,
color = "blue",
fill = "blue",
bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
log_g2 <- gghistogram(log_golden_bosc,
color = "red",
fill = "red",
bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
print(log_g1)
print(log_g2)
log_g1_q_q <- ggqqplot(data = log_winter_nelly,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra transformada Winter Nelly vs. distribución normal")
print(log_g1_q_q)
log_g2_q_q <- ggqqplot(data = log_golden_bosc,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra transformada Golden Bosc vs. distribución normal")
print(log_g2_q_q)
# Ahora, se realizará una prueba no paramétrica de Wilcoxon emparejada sobre los datos transformados
wilcox_test <- wilcox.test(log_winter_nelly, log_golden_bosc, paired = TRUE)
prueba <- t.test(x = log_winter_nelly,
y = log_golden_bosc,
paired = FALSE,
alternative = "two.sided",
mu = 0,
conf.level = 1 - alfa)
#se imprime la prueba realizada
print(prueba)
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
winter_nelly <- c(150.6948, 144.935, 321.2211, 153.4385, 122.8188, 171.2131, 157.9422, 219.7431, 204.1157)
golden_bosc <- c(130.2934, 192.9736, 227.2896, 160.5874, 132.915, 118.7482, 149.1814, 236.0405, 191.3631, 133.928, 367.991, 144.3353)
alfa <- 0.05
print(shapiro.test(winter_nelly))
print(shapiro.test(golden_bosc))
# Se realizan los gráficos de dispersión e histograma correspondientes
g1 <- gghistogram(winter_nelly, color = "blue",
fill = "blue", bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
g2 <- gghistogram(golden_bosc, color = "red",
fill = "red", bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
print(g1)
print(g2)
# Se realizan los gráficos Q-Q para mostrar la distribución.
g1_q_q <- ggqqplot(data = winter_nelly,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra Winter Nelly vs. distribución normal")
print(g1_q_q)
g2_q_q <- ggqqplot(data = golden_bosc,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra Golden Bosc vs. distribución normal")
print(g2_q_q)
# Se realiza una transformación logarítmica debido a la asimetría de los datos
log_winter_nelly <- log(winter_nelly)
log_golden_bosc <- log(golden_bosc)
# Se utiliza Shapiro para verificar si las transformaciones tienen una distribución normal
print(shapiro.test(log_winter_nelly))
print(shapiro.test(log_golden_bosc))
# Se realizan los gráficos de dispersión e histograma correspondientes
log_g1 <- gghistogram(log_winter_nelly,
color = "blue",
fill = "blue",
bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
log_g2 <- gghistogram(log_golden_bosc,
color = "red",
fill = "red",
bins = 10,
xlab = "Peso (Gramos)",
ylab = "Peras (Unidad)")
print(log_g1)
print(log_g2)
# Comprobación de similitud a distribución normal mediante gráfico Q-Q
log_g1_q_q <- ggqqplot(data = log_winter_nelly,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra transformada Winter Nelly vs. distribución normal")
print(log_g1_q_q)
log_g2_q_q <- ggqqplot(data = log_golden_bosc,
color = "steelblue",
xlab = "Teórico",
ylab = "Muestra",
title = "Gráfico Q-Q muestra transformada Golden Bosc vs. distribución normal")
print(log_g2_q_q)
prueba <- t.test(x = log_winter_nelly,
y = log_golden_bosc,
paired = FALSE,
alternative = "two.sided",
mu = 0,
conf.level = 1 - alfa)
#se imprime la prueba realizada
print(prueba)
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se obtiene los datos referentes a hombres solteros de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
hombres_solteros_rm <- muestra_hogares %>% filter(sexo == "Hombre" &
ecivil == "Soltero(a)")
# Se obtiene los datos referentes a mujeres solteras de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
mujeres_solteras_rm <- muestra_hogares %>% filter(sexo == "Mujer" & ecivil == "Soltero(a)")
# Veamos ahora el histograma de los datos.
g3 <- ggplot(muestra_hogares, aes(x = sexo, fill = sexo)) +
geom_bar() +
facet_grid(~ sexo) +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Histograma de hombres y mujeres solteros(as) en la Región Metropolitana") +
theme_minimal()
print(g3)
# Se utiliza Shapiro para verificar si tiene una distribución normal
print(shapiro.test(hombres_solteros_rm))
print(shapiro.test(mujeres_solteras_rm))
# Se utiliza Shapiro para verificar si tiene una distribución normal
print(shapiro.test(hombres_solteros_rm$region))
print(shapiro.test(mujeres_solteras_rm$region))
View(datos)
View(datos)
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(WRS2)){
install.packages("tidyr", dependencies = TRUE)
require(WRS2)
}
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se obtiene los datos referentes a hombres solteros de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
hombres_solteros_rm <- muestra_hogares %>% filter(sexo == "Hombre" &
ecivil == "Soltero(a)")
# Se obtiene los datos referentes a mujeres solteras de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
mujeres_solteras_rm <- muestra_hogares %>% filter(sexo == "Mujer" & ecivil == "Soltero(a)")
# Veamos ahora el histograma de los datos.
g3 <- ggplot(muestra_hogares, aes(x = sexo, fill = sexo)) +
geom_bar() +
facet_grid(~ sexo) +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Histograma de hombres y mujeres solteros(as) en la Región Metropolitana") +
theme_minimal()
print(g3)
# Se extrae el número de hombres y mujeres solteras de acuerdo a la muestra obtenida
n_hombres_solteros <- nrow(hombres_solteros_rm)
n_mujeres_solteras <- nrow(mujeres_solteras_rm)
# Crear un dataframe con los datos
datos_solteros <- data.frame(Grupo = c("Hombres",
"Mujeres"),
Cantidad = c(n_hombres_solteros,
n_mujeres_solteras))
View(datos_solteros)
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se obtiene los datos referentes a hombres solteros de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
hombres_solteros_rm <- muestra_hogares %>% filter(sexo == "Hombre" &
ecivil == "Soltero(a)")
# Se obtiene los datos referentes a mujeres solteras de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
mujeres_solteras_rm <- muestra_hogares %>% filter(sexo == "Mujer" & ecivil == "Soltero(a)")
# Veamos ahora el histograma de los datos.
g3 <- ggplot(muestra_hogares, aes(x = sexo, fill = sexo)) +
geom_bar() +
facet_grid(~ sexo) +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Histograma de hombres y mujeres solteros(as) en la Región Metropolitana") +
theme_minimal()
print(g3)
# Se extrae el número de hombres y mujeres solteras de acuerdo a la muestra obtenida
n_hombres_solteros <- nrow(hombres_solteros_rm)
n_mujeres_solteras <- nrow(mujeres_solteras_rm)
# Crear un dataframe con los datos
datos_solteros <- data.frame(Grupo = c("Hombres",
"Mujeres"),
Cantidad = c(n_hombres_solteros,
n_mujeres_solteras))
g4 <- barplot(datos_solteros, main = "Distribución de la variable sexo", xlab = "Sexo", ylab = "Frecuencia")
g4 <- ggplot(datos_solteros, aes(x = Grupo, y = Cantidad, fill = Grupo)) +
geom_bar(stat = "identity") +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Distribución de la variable sexo") +
theme_minimal()
print(g4)
View(muestra_hogares)
# Veamos ahora el histograma de los datos.
g3 <- ggplot(muestra_hogares, aes(x = region, fill = sexo)) +
geom_bar() +
facet_grid(~ sexo) +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Histograma de hombres y mujeres solteros(as)") +
theme_minimal()
print(g3)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
View(muestra_hogares)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
View(muestra_hogares)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo == "Soltero(a)", region, ecivil)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if (!require(ggpubr)) {
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(WRS2)){
install.packages("tidyr", dependencies = TRUE)
require(WRS2)
}
# Cargar datos
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil Soltero(a).
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Veamos ahora el histograma de los datos de personas solteras en todas las regiones.
g3 <- ggplot(muestra_hogares, aes(x = region, fill = sexo)) +
geom_bar() +
facet_grid(~ sexo) +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Histograma de hombres y mujeres solteros(as)") +
theme_minimal()
print(g3)
# Se obtiene los datos referentes a hombres solteros de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
hombres_solteros_rm <- muestra_hogares %>% filter(sexo == "Hombre" &
ecivil == "Soltero(a)" &
region == "Region Metropolitana de Santiago")
# Se obtiene los datos referentes a mujeres solteras de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
mujeres_solteras_rm <- muestra_hogares %>% filter(sexo == "Mujer" &
ecivil == "Soltero(a)" &
regios == "Region Metropolitana de Santiago")
# Se obtiene los datos referentes a mujeres solteras de la Región Metropolitana
# de acuerdo a la muestra obtenida anteriormente
mujeres_solteras_rm <- muestra_hogares %>% filter(sexo == "Mujer" &
ecivil == "Soltero(a)" &
region == "Region Metropolitana de Santiago")
# Se extrae el número de hombres y mujeres solteras de acuerdo a la muestra obtenida
n_hombres_solteros <- nrow(hombres_solteros_rm)
n_mujeres_solteras <- nrow(mujeres_solteras_rm)
# Crear un dataframe con los datos
datos_solteros <- data.frame(Grupo = c("Hombres",
"Mujeres"),
Cantidad = c(n_hombres_solteros,
n_mujeres_solteras))
g4 <- ggplot(datos_solteros, aes(x = Grupo, y = Cantidad, fill = Grupo)) +
geom_bar(stat = "identity") +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Distribución de la variable sexo") +
theme_minimal()
print(g4)
View(hombres_solteros_rm)
View(muestra_hogares)
# A continuación se fija una semilla propia
set.seed(349)
# Se selecciona una muestra aleatoria de hogares considerando: 250 < n < 500
muestra_hogares <- sample_n(datos, 369)
# Se seleccionan los datos de interés según la interrogante propuesta
muestra_hogares <- muestra_hogares %>% select(sexo, region, ecivil)
# Se filtra por todas las personas que tienen un estado civil Soltero(a).
muestra_hogares <- muestra_hogares %>% filter(ecivil == "Soltero(a)")
# Se obtiene los datos referentes a hombres solteros de acuerdo a la muestra obtenida anteriormente
hombres_solteros_rm <- muestra_hogares %>% filter(sexo == "Hombre")
# Se obtiene los datos referentes a mujeres solteras de acuerdo a la muestra obtenida anteriormente
mujeres_solteras_rm <- muestra_hogares %>% filter(sexo == "Mujer")
# Se extrae el número de hombres y mujeres solteras de acuerdo a la muestra obtenida
n_hombres_solteros <- nrow(hombres_solteros_rm)
n_mujeres_solteras <- nrow(mujeres_solteras_rm)
# Crear un dataframe con los datos
datos_solteros <- data.frame(Grupo = c("Hombres",
"Mujeres"),
Cantidad = c(n_hombres_solteros,
n_mujeres_solteras))
# Se crea el grafico correspondiente
g3 <- ggplot(datos_solteros, aes(x = Grupo, y = Cantidad, fill = Grupo)) +
geom_bar(stat = "identity") +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Distribución de la variable sexo") +
theme_minimal()
print(g3)
View(datos_solteros)
# Se crea el grafico correspondiente
g3 <- ggplot(datos_solteros, aes(x = Grupo, y = Cantidad, fill = Grupo)) +
geom_bar(stat = "identity") +
labs(x = "Sexo", y = "Frecuencia") +
ggtitle("Hombres solteros v/S Mujeres solteras") +
theme_minimal()
print(g3)
# En este punto, se identifica que debemos para comparar una variable continua (media)
# en dos muestras independientes. Por lo que, en este caso, una buena alternativa robusta
# es la prueba de Yuen con bootstrapping usando como estimador la media.
B <- 5000
# Se establece el alfa:
alfa <- 0.05
# Se realiza la prueba anteriormente descrita
prueba_yuen <- pb2gen(ypercap ~ sexo, data = datos_solteros, est = "mean", nboot = B)
# Se realiza la prueba anteriormente descrita
prueba_yuen <- pb2gen(datos_solteros$Cantidad ~ sexo, data = datos_solteros, est = "mean", nboot = B)
# Se realiza la prueba anteriormente descrita
prueba_yuen <- pb2gen(datos_solteros$Cantidad ~ datos_solteros$Grupo, data = datos_solteros, est = "mean", nboot = B)
print(prueba_yuen)
# Se realiza la prueba anteriormente descrita
prueba_yuen <- pb2gen(muestra_hogares$region ~ muestra_hogares$sexo, data = muestra_hogares, est = "mean", nboot = B)
# Se realiza la prueba anteriormente descrita
prueba_yuen <- pb2gen(muestra_hogares$sexo ~ muestra_hogares$region, data = muestra_hogares, est = "mean", nboot = B)
print(prueba_yuen)
# Se realiza la prueba anteriormente descrita
prueba_yuen <- pb2gen(datos_solteros$Cantidad ~ datos_solteros$Grupo, data = datos_solteros, est = "mean", nboot = B)
print(prueba_yuen)
