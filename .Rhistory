print(correlacion)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(!(predictoras))
cat("\nMatriz de correlación:\n")
correlacion <- cor(muestra, y = respuesta)
cat("\nMatriz de correlación:\n")
print(correlacion)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(!predictoras)
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
# Antes de resolver la problemática, en primer lugar debemos obtener los datos:
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# Definimos la semilla con los últimos 4 dígitos del RUT del participante
# Matias Yañez (20.580.291-6), el cual es el menor de todos los integrantes.
set.seed(0291)
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(!predictoras)
cat("\nMatriz de correlación:\n")
correlacion <- cor(muestra, y = respuesta)
cat("\nMatriz de correlación:\n")
print(correlacion)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(any_of(predictoras))
cat("\nMatriz de correlación:\n")
correlacion <- cor(muestra, y = respuesta)
cat("\nMatriz de correlación:\n")
print(correlacion)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(all_of(predictoras))
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(any_of(predictoras))
cat("\nMatriz de correlación:\n")
correlacion <- cor(muestra, y = respuesta)
cat("\nMatriz de correlación:\n")
print(correlacion)
predictoras
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(all_of(predictoras))
correlacion <- cor(muestra, y = respuesta)
print(correlacion)
predictoras
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(!predictoras)
correlacion <- cor(muestra, y = respuesta)
print(correlacion)
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
# Antes de resolver la problemática, en primer lugar debemos obtener los datos:
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# Definimos la semilla con los últimos 4 dígitos del RUT del participante
# Matias Yañez (20.580.291-6), el cual es el menor de todos los integrantes.
set.seed(0291)
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(!predictoras)
correlacion <- cor(muestra, y = respuesta)
print(correlacion)
predictoras
View(correlacion)
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
nombre_columna_max <- colnames(correlacion)[which.max(correlacion)]
View(correlacion)
correlacion <- cor(muestra, y = respuesta)
print(correlacion)
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
nombre_columna_max <- colnames(correlacion)[which.max(correlacion$)]
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
nombre_columna_max <- colnames(correlacion)[which.max(correlacion[1])]
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
correlacion_max <- which(abs(correlacion) == max(abs(correlacion)))
predictor <- rownames(correlacion)[correlacion_max]
predictor_RlS <- muestra[, c(predictor, "respuesta")]
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
correlacion_max <- which(abs(correlacion) == max(abs(correlacion)))
predictor <- rownames(correlacion)[correlacion_max]
predictor <- rownames(correlacion)[correlacion_max]
rls <- muestra %>% select(predictor)
View(rls)
rls <- cbind(respuesta, rls)
View(rls)
cat("La mejor variable es:",predictor)
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
# Antes de resolver la problemática, en primer lugar debemos obtener los datos:
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# Definimos la semilla con los últimos 4 dígitos del RUT del participante
# Matias Yañez (20.580.291-6), el cual es el menor de todos los integrantes.
set.seed(0291)
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar la correlación de las variables restantes con la respuesta.
muestra <- muestra %>% select(!predictoras)
correlacion <- cor(muestra, y = respuesta)
print(correlacion)
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
correlacion_max <- which(abs(correlacion) == max(abs(correlacion)))
predictor <- rownames(correlacion)[correlacion_max]
cat("La mejor variable es:",predictor)
# Una vez obtenida la mejor variable para determinar la calidad de los vinos
# daremos paso a construir el modelo de regresión lineal simple, para ello en
# primer lugar juntaremos la varible de respuestas con la variable predictora
datos_rls <- muestra %>% select(mejor)
# Una vez obtenida la mejor variable para determinar la calidad de los vinos
# daremos paso a construir el modelo de regresión lineal simple, para ello en
# primer lugar juntaremos la varible de respuestas con la variable predictora
datos_rls <- muestra %>% select(predictor)
datos_rls <- cbind(datos_rls, respuesta)
View(datos_rls)
view(mtcars)
View(mtcars)
library(caret)
# Cargar los datos.
datos <- mtcars
# Crear conjuntos de entrenamiento y prueba.
set.seed(101)
n <- nrow(datos)
n_entrenamiento <- floor(0.7 * n)
muestra <- sample.int(n = n, size = n_entrenamiento, replace = FALSE)
entrenamiento <- datos[muestra, ]
prueba  <- datos[-muestra, ]
View(entrenamiento)
View(prueba)
# Ajustar modelo usando validación cruzada de 5 pliegues.
modelo <- train(mpg ~ wt, data = entrenamiento, method = "lm",
trControl = trainControl(method = "cv", number = 5))
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
# Antes de resolver la problemática, en primer lugar debemos obtener los datos:
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(caret)){
install.packages("caret", dependencies = TRUE)
require(caret)
}
# Antes de resolver la problemática, en primer lugar debemos obtener los datos:
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# Definimos la semilla con los últimos 4 dígitos del RUT del participante
# Matias Yañez (20.580.291-6), el cual es el menor de todos los integrantes.
set.seed(0291)
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar la correlación de las variables restantes con la respuesta.
sub_muestra <- muestra %>% select(!predictoras)
correlacion <- cor(sub_muestra, y = respuesta)
print(correlacion)
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
correlacion_max <- which(abs(correlacion) == max(abs(correlacion)))
predictor <- rownames(correlacion)[correlacion_max]
cat("La mejor variable es:",predictor)
# Una vez obtenida la mejor variable para determinar la calidad de los vinos
# daremos paso a construir el modelo de regresión lineal simple, para ello en
# primer lugar juntaremos la variable de respuestas con la variable predictora
datos_rls <- sub_muestra %>% select(predictor)
datos_rls <- cbind(datos_rls, respuesta)
modelo <- lm(respuesta ~ alcohol, data = datos_rls)
print(summary(modelo))
# Graficar el modelo.
p <- ggscatter(datos_rls, x = "alcohol", y = "respuesta", color = "blue", fill = "blue",
xlab = "Alcohol [grados]", ylab = "Calidad [Puntuacion]")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
# Crear gráficos para evaluar el modelo.
plot(modelo)
View(datos)
# Graficar el modelo.
p <- ggscatter(datos, x = predictor, y = respuesta, color = "blue", fill = "blue",
xlab = "Alcohol [grados]", ylab = "Calidad [Puntuacion]")
# Graficar el modelo.
p <- ggscatter(datos, x = predictor, y = "respuesta", color = "blue", fill = "blue",
xlab = "Alcohol [grados]", ylab = "Calidad [Puntuacion]")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
# Graficar el modelo.
p <- ggscatter(datos, x = "alcohol", y = "respuesta", color = "blue", fill = "blue",
xlab = "Alcohol [grados]", ylab = "Calidad [Puntuacion]")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
# Graficar el modelo.
p <- ggscatter(datos_rls, x = predictor, y = "respuesta", color = "blue", fill = "blue",
xlab = "Alcohol [grados]", ylab = "Calidad [Puntuacion]")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
modelo <- lm(respuesta ~ predictor, data = datos_rls)
View(datos_rls)
# Evaluar la correlación de las variables restantes con la respuesta.
sub_muestra <- muestra %>% select(!predictoras)
correlacion <- cor(sub_muestra, y = respuesta)
print(correlacion)
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
correlacion_max <- which(abs(correlacion) == max(abs(correlacion)))
predictor <- rownames(correlacion)[correlacion_max]
cat("La mejor variable es:",predictor)
# Una vez obtenida la mejor variable para determinar la calidad de los vinos
# daremos paso a construir el modelo de regresión lineal simple, para ello en
# primer lugar juntaremos la variable de respuestas con la variable predictora
datos_rls <- sub_muestra %>% select(predictor)
View(datos_rls)
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(caret))){
if(!require(caret)){
install.packages("caret", dependencies = TRUE)
require(caret)
}
# Antes de resolver la problemática, en primer lugar debemos obtener los datos:
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# Definimos la semilla con los últimos 4 dígitos del RUT del participante
# Matias Yañez (20.580.291-6), el cual es el menor de todos los integrantes.
set.seed(0291)
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar la correlación de las variables restantes con la respuesta.
sub_muestra <- muestra %>% select(!predictoras)
correlacion <- cor(sub_muestra, y = respuesta)
print(correlacion)
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
correlacion_max <- which(abs(correlacion) == max(abs(correlacion)))
predictor <- rownames(correlacion)[correlacion_max]
cat("La mejor variable es:",predictor)
View(datos)
# Una vez obtenida la mejor variable para determinar la calidad de los vinos
# daremos paso a construir el modelo de regresión lineal simple, para ello en
# primer lugar juntaremos la variable de respuestas con la variable predictora
datos_rls <- sub_muestra %>% select(predictor)
View(datos_rls)
colnames(datos_rls)[1] <- "predictor_rls"
datos_rls <- cbind(datos_rls, respuesta)
modelo <- lm(respuesta ~ predictor_rls, data = datos_rls)
print(summary(modelo))
# Graficar el modelo.
p <- ggscatter(datos_rls, x = predictor_rls, y = "respuesta", color = "blue", fill = "blue",
xlab = "Alcohol [grados]", ylab = "Calidad [Puntuacion]")
modelo <- lm(respuesta ~ predictor_rls, data = datos_rls)
print(summary(modelo))
# Graficar el modelo.
p <- ggscatter(datos_rls, x = "predictor_rls", y = "respuesta", color = "blue", fill = "blue",
xlab = "Alcohol [grados]", ylab = "Calidad [Puntuacion]")
p <- p + geom_smooth(method = lm, se = FALSE, colour = "red")
print(p)
# Crear gráficos para evaluar el modelo.
plot(modelo)
print(correlacion)
# Gráfico de dispersión
plot(datos_rls[, predictor_rls], datos_rls[, "respuesta"],
xlab = predictor_rls, ylab = "respuesta", main = "Relación lineal")
# Gráfico de dispersión
plot(datos_rls[, predictor_rls], datos_rls[, "respuesta"],
xlab = predictor, ylab = "respuesta", main = "Relación lineal")
View(datos_rls)
# Gráfico de dispersión
plot(datos_rls[, "predictor_rls"], datos_rls[, "respuesta"],
xlab = predictor, ylab = "respuesta", main = "Relación lineal")
modelo <- lm(respuesta ~ predictor_rls, data = datos_rls)
# Importación de librerías
if (!require(dplyr)) {
install.packages("dplyr", dependencies = TRUE)
require(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr", dependencies = TRUE)
require(tidyr)
}
if(!require(ggpubr)){
install.packages("ggpubr", dependencies = TRUE)
require(ggpubr)
}
if(!require(caret)){
install.packages("caret", dependencies = TRUE)
require(caret)
}
# Antes de resolver la problemática, en primer lugar debemos obtener los datos:
datos <- read.csv2(file.choose(), stringsAsFactors = TRUE)
# Definimos la semilla con los últimos 4 dígitos del RUT del participante
# Matias Yañez (20.580.291-6), el cual es el menor de todos los integrantes.
set.seed(0291)
# Cogemos la muestra de los 100 vinos
muestra <- sample_n(datos, 100)
muestra[["clase"]] <- factor(muestra[["clase"]])
# Separamos la variable de respuesta
respuesta <- muestra[["calidad"]]
muestra[["calidad"]] <- NULL
# Seleccionamos de forma aleatoria las 6 variables predictoras, para ello
# obtenemos, los nombres de cada variable
variables <- colnames(muestra)
# Luego tomamos 6 de forma aleatoria
predictoras <- sample(variables, 6, replace = FALSE)
cat("Las variables predictoras escogidas de forma aleatoria son:\n",predictoras)
# Evaluar la correlación de las variables restantes con la respuesta.
sub_muestra <- muestra %>% select(!predictoras)
correlacion <- cor(sub_muestra, y = respuesta)
print(correlacion)
# Una vez creada la matriz de correlación, obtenemos la variable que tenga mayor
# correlación:
correlacion_max <- which(abs(correlacion) == max(abs(correlacion)))
predictor <- rownames(correlacion)[correlacion_max]
cat("La mejor variable es:",predictor)
# Una vez obtenida la mejor variable para determinar la calidad de los vinos
# daremos paso a construir el modelo de regresión lineal simple, para ello en
# primer lugar juntaremos la variable de respuestas con la variable predictora
datos_rls <- sub_muestra %>% select(predictor)
colnames(datos_rls)[1] <- "predictor_rls"
datos_rls <- cbind(datos_rls, respuesta)
# Entonces, para poder verificar la primera condición, lo que haremos sera
# evaluar si existe una relación lineal entre la variable predictora y la
# variable de respuesta utilizando un gráfico de dispersión (scatter plot) con
# la variable predictora en el eje x y la variable de respuesta en el eje y.
g1 <- ggscatter(datos_rls, x = "predictor_rls", y = "respuesta", color = "blue",
fill = "blue", xlab = "Alcohol [grados]",
ylab = "Calidad [Puntuacion]")
g1 <- g1 + geom_smooth(method = lm, se = FALSE, colour = "red")
print(g1)
View(datos_rls)
View(datos)
# Entonces, para poder verificar la primera condición, lo que haremos sera
# evaluar si existe una relación lineal entre la variable predictora y la
# variable de respuesta utilizando un gráfico de dispersión (scatter plot) con
# la variable predictora en el eje x y la variable de respuesta en el eje y.
g1 <- ggscatter(muestra, x = "alcohol", y = "calidad", color = "blue",
fill = "blue", xlab = "Alcohol [grados]",
ylab = "Calidad [Puntuacion]")
g1 <- g1 + geom_smooth(method = lm, se = FALSE, colour = "red")
print(g1)
# Entonces, para poder verificar la primera condición, lo que haremos sera
# evaluar si existe una relación lineal entre la variable predictora y la
# variable de respuesta utilizando un gráfico de dispersión (scatter plot) con
# la variable predictora en el eje x y la variable de respuesta en el eje y.
g1 <- ggscatter(muestra, x = "alcohol", y = "calidad", color = "blue",
fill = "blue", xlab = "Alcohol [grados]",
ylab = "Calidad [Puntuacion]")
print(g1)
View(muestra)
View(datos)
View(datos_rls)
